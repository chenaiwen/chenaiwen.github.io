<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>二</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Spring学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二</title>
      <link href="posts/undefined.html"/>
      <url>posts/undefined.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Spring学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IOC原理</title>
      <link href="posts/8c60.html"/>
      <url>posts/8c60.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、Spring框架概述"><a href="#一、Spring框架概述" class="headerlink" title="一、Spring框架概述"></a>一、Spring框架概述</h2><h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h3><ol><li><p>Spring是一个轻量级的开源的JavaEE的框架。</p></li><li><p>解决企业开发的复杂问题。</p></li><li><p>有很多组成部分，两个核心部分：IOC和Aop</p><ol><li><p>IOC：控制反转，把创建对象的过程交给Spring进行管理。</p></li><li><p>Aop：面向切面，不修改源代码进行功能增强。</p></li><li><p>特点：</p><ol><li><p>方便解耦，简化开发</p></li><li><p>Aop编程支持</p></li><li><p>方便程序测试</p></li><li><p>方便集成各种优秀框架</p></li><li><p>方便进行事务操作</p></li><li><p>降低API开发难度</p></li></ol></li></ol></li></ol><h3 id="2-基本过程"><a href="#2-基本过程" class="headerlink" title="2. 基本过程"></a>2. 基本过程</h3><ol><li><p>安装Spring5  Spring.io</p></li><li><p>新建项目</p></li><li><p>导入相关jar包</p></li><li><p>创建普通类普通方法</p></li><li><p>创建spring配置文件，在其中配置创建的对象</p><ol><li>Spring配置文件使用xml格式</li></ol><p>2）配置对象：</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"user"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.spring5.User"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>id是给类起个名字，<span class="token keyword">class</span>是类的路径<span class="token operator">--</span><span class="token operator">></span></code></pre></li></ol><h3 id="3-IOC简介"><a href="#3-IOC简介" class="headerlink" title="3. IOC简介"></a>3. IOC简介</h3><ol><li><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>控制反转，把创建对象和对象之间的调用过程交给Spring管理。使用IOC的目的是降低耦合度。</p><p>借助于“第三方”实现具有依赖关系的对象之间的解耦，这个“第三方“就是IOC。</p><p>如果对象A依赖于对象B，那么对象A在初始化或者运行到某一点的时候，自己必须主动去创建对象B或者使用已经创建的对象B。无论是创建还是使用对象B，控制权都在自己手上。 软件系统在引入IOC容器之后，这种情形就完全改变了，由于IOC容器的加入，对象A与对象B之间失去了直接联系，所以，当对象A运行到需要对象B的时候，IOC容器会主动创建一个对象B注入到对象A需要的地方。对象A获得依赖对象B的过程,由主动行为变为了被动行为，控制权颠倒过来了，这就是“控制反转”这个名称的由来。</p><p>IOC也叫依赖注入(DI), 所谓依赖注入，就是由IOC容器在运行期间，动态地将某种依赖关系注入到对象之中。所以，依赖注入(DI)和控制反转(IOC)是从不同的角度的描述的同一件事情。</p></li></ol><ol start="2"><li><h4 id="IOC接口"><a href="#IOC接口" class="headerlink" title="IOC接口"></a>IOC接口</h4><p>1） IOC思想基于IOC容器完成，IOC容器底层就是对象工厂</p><p>2）Spring提供IOC容器实现两种方式（两个接口）：</p><p>​    a. BeanFactory: IOC容器基本实现方式， 是spring的内部使用接口，不提供开发人员使用（加载        配置文件时不会创建对象，在获取（使用）对象时才去创建对象）</p><p>​    b. ApplicationContext：BeanFactory接口的子接口，提供更多更强大的功能，开发人员使用        （加载配置文件时就会把配置文件中的对象创建）</p></li></ol><ol start="3"><li><h4 id="IOC操作Bean管理"><a href="#IOC操作Bean管理" class="headerlink" title="IOC操作Bean管理"></a>IOC操作Bean管理</h4><p>Bean管理包括两个部分：</p><p>a. Spring创建对象</p><p>b. Spring注入属性</p></li></ol><h5 id="3-1-Spring创建对象"><a href="#3-1-Spring创建对象" class="headerlink" title="3.1 Spring创建对象"></a>3.1 Spring创建对象</h5><p>基于xml配置文件方式实现</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>配置User对象<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"user"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.spring5.User"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span> </code></pre><p>a.   在spring配置文件中，使用bean标签，标签里面加入相应的属性，就可以实现对象创建</p><p>b.   常用属性：</p><p>​        id: 唯一标识</p><p>​        class: 类的全路径</p><p>​        name: 与id类似，name中可以加特殊符号，id不行</p><p>c.   创建对象时，默认也是执行无参构造方法</p><h5 id="3-2-Spring注入属性"><a href="#3-2-Spring注入属性" class="headerlink" title="3.2  Spring注入属性"></a>3.2  Spring注入属性</h5><h6 id="基于xml方式注入属性"><a href="#基于xml方式注入属性" class="headerlink" title="基于xml方式注入属性"></a>基于xml方式注入属性</h6><p>​    3.2.1 使用set方法进行注入：</p><p>​        在类中定义参数和set方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> String bname<span class="token punctuation">;</span><span class="token keyword">private</span> String bauthor<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//set方法注入</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBname</span><span class="token punctuation">(</span>String bname<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>bname <span class="token operator">=</span> bname<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBauthor</span><span class="token punctuation">(</span>String author<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>bauthor <span class="token operator">=</span> author<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>​    在xml文件中配置</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"book"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.spring5.Book"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>property是属性配置标签<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"bname"</span> value<span class="token operator">=</span><span class="token string">"哈利波特"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>这里配置属性时，book类中要定义相应参数的set方法<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"bauthor"</span> value<span class="token operator">=</span><span class="token string">"罗琳"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span></code></pre><p>​    测试</p><pre class=" language-java"><code class="language-java">ApplicationContext context<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"bean1.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Book book<span class="token operator">=</span>context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"book"</span><span class="token punctuation">,</span> Book<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//第一个参数就是bean标签的id属性值</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span>book<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>​    3.2.2 第二种注入方式：有参构造输入</p><p>​    (1) 创建类，定义属性，创建属性对应的有参构造方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Orders</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//属性</span>    <span class="token keyword">private</span> String oname<span class="token punctuation">;</span>    <span class="token keyword">private</span> String address<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//有参构造</span>    <span class="token keyword">public</span> <span class="token function">Orders</span><span class="token punctuation">(</span>String oname<span class="token punctuation">,</span> String address<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>oname<span class="token operator">=</span>oname<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>address<span class="token operator">=</span>address<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>​    (2) 在spring配置文件中配置</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"orders"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.spring5.Orders"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>constructor<span class="token operator">-</span>arg name<span class="token operator">=</span><span class="token string">"address"</span> value<span class="token operator">=</span><span class="token string">"China"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>constructor<span class="token operator">-</span>arg<span class="token operator">></span>    <span class="token operator">&lt;</span>constructor<span class="token operator">-</span>arg index<span class="token operator">=</span><span class="token string">"0"</span> value<span class="token operator">=</span><span class="token string">"evan"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>constructor<span class="token operator">-</span>arg<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>index指有参构造中的参数索引位置<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span></code></pre><h6 id="注入其他属性"><a href="#注入其他属性" class="headerlink" title="注入其他属性"></a>注入其他属性</h6><ol><li><h6 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h6><p>设置空值</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>null值<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"address"</span><span class="token operator">></span><span class="token operator">&lt;</span>null<span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span></code></pre></li></ol><p>​        特殊符号</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>属性包含特殊符号    <span class="token number">1</span><span class="token punctuation">.</span> 把<span class="token operator">&lt;</span><span class="token operator">></span>进行转义 <span class="token operator">&amp;</span>lt  <span class="token operator">&amp;</span>gt    <span class="token number">2</span><span class="token punctuation">.</span> 把带特殊符号内容写到CDATA<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"address"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>value<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token punctuation">[</span>CDATA<span class="token punctuation">[</span><span class="token operator">&lt;&lt;</span>南京<span class="token operator">>></span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span></code></pre><ol start="2"><li><h6 id="外部Bean"><a href="#外部Bean" class="headerlink" title="外部Bean"></a>外部Bean</h6><p>（1）创建两个类service类和dao类（MVC）</p><p>（2）在service调用dao里面的方法</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//1. 原始方法</span>UserDao userDao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserDaoImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//多态</span>userDao<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//update()方法在UserDaoImpl中定义过了</span></code></pre><p>  (3)  在spring配置文件中配置, 首先配置UserService对象，在其中创建UserDao属性，接着注入属    性值，因为该属性值为对象（UserDaoImpl)，所以用ref指向被调用的对象，即被创建的        UserDaoImpl对象的id。</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>service和dao对象创建<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"userService"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.spring5.service.UserService"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>ref属性：创建userDao对象bean标签id值<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>因为注入的属性值是对象，所以不能用value，要用ref指向被调用的对象<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"UserDao"</span> ref<span class="token operator">=</span><span class="token string">"userDaoImpl"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"userDaoImpl"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.spring5.dao.UserDaoImpl"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span></code></pre></li></ol><pre><code>3. ###### 内部Bean在配置属性值是对象的属性时，在&lt;peoperty&gt;内部嵌套配置该属性的对象值。例：（1） 一对多关系：企业和员工（2） 使用对象类型表示员工所属部门   (3） 在spring文件中配置```javapublic class Emp &#123;    private String ename;    private String gender;    //员工属于部门    private Dept dept;    public void setEname(String ename) &#123;        this.ename = ename;    &#125;    public void setGender(String gender) &#123;        this.gender = gender;    &#125;    public void setDept(Dept dept) &#123;        this.dept = dept;    &#125;&#125;</code></pre><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>内部bean<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"emp"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.spring5.bean.Emp"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>设置两个普通属性<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"ename"</span> value<span class="token operator">=</span><span class="token string">"lucy"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"gender"</span> value<span class="token operator">=</span><span class="token string">"female"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>设置对象类型属性<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>内部bean，嵌套注入的对象属性<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"dept"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"dept"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.spring5.bean.Dept"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"dname"</span> value<span class="token operator">=</span><span class="token string">"安保部"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span></code></pre><ol start="4"><li><h6 id="级联赋值"><a href="#级联赋值" class="headerlink" title="级联赋值"></a>级联赋值</h6><p>第一种写法</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"emp"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.spring5.bean.Emp"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>设置两个普通属性<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"ename"</span> value<span class="token operator">=</span><span class="token string">"lucy"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"gender"</span> value<span class="token operator">=</span><span class="token string">"female"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>级联赋值，先配置外部Bean，再注入属性<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"dept"</span> ref<span class="token operator">=</span><span class="token string">"dept"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"dept"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.spring5.bean.Dept"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"dname"</span> value<span class="token operator">=</span><span class="token string">"财务部"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span></code></pre><p>第二种写法, 通过被引用对象的get方法，直接在<property>中配置对象的属性值</property></p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"emp"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.spring5.bean.Emp"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>设置两个普通属性<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"ename"</span> value<span class="token operator">=</span><span class="token string">"lucy"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"gender"</span> value<span class="token operator">=</span><span class="token string">"female"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"dept"</span> ref<span class="token operator">=</span><span class="token string">"dept"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>级联赋值，设置Dept对象的dname属性，需要在Emp中创建<span class="token function">getDept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"dept.dname"</span> value<span class="token operator">=</span><span class="token string">"技术部"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"dept"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.spring5.bean.Dept"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span></code></pre></li></ol><ol start="5"><li><h6 id="xml注入集合属性"><a href="#xml注入集合属性" class="headerlink" title="xml注入集合属性"></a>xml注入集合属性</h6><p>\1.   输入数组类型属性</p><p>\2.   注入List集合类型属性</p><p>\3.   注入Map集合属性</p></li></ol><p>​        先在类里面定义属性和set方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//数组类型</span>    <span class="token keyword">private</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> courses<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//List集合</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> list<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//map集合属性</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> maps<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//set集合属性</span>    <span class="token keyword">private</span> Set<span class="token operator">&lt;</span>String<span class="token operator">></span> sets<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCourses</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> courses<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>courses <span class="token operator">=</span> courses<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setList</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> list<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">=</span> list<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMaps</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> maps<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>maps <span class="token operator">=</span> maps<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>配置Spring文件</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token number">1</span><span class="token punctuation">.</span>集合类型属性注入<span class="token operator">--</span><span class="token operator">></span> <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"stu"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.spring5.collectiontype.Student"</span><span class="token operator">></span>     <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>数组类型属性注入<span class="token operator">--</span><span class="token operator">></span>     <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"courses"</span><span class="token operator">></span>         <span class="token operator">&lt;</span>array<span class="token operator">></span>             <span class="token operator">&lt;</span>value<span class="token operator">></span>数据库<span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">></span>             <span class="token operator">&lt;</span>value<span class="token operator">></span>java<span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">></span>             <span class="token operator">&lt;</span>value<span class="token operator">></span>计算机网络<span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">></span>         <span class="token operator">&lt;</span><span class="token operator">/</span>array<span class="token operator">></span>     <span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>     <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>list类型属性注入<span class="token operator">--</span><span class="token operator">></span>     <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"list"</span><span class="token operator">></span>         <span class="token operator">&lt;</span>list<span class="token operator">></span>             <span class="token operator">&lt;</span>value<span class="token operator">></span>张三<span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">></span>             <span class="token operator">&lt;</span>value<span class="token operator">></span>小三<span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">></span>         <span class="token operator">&lt;</span><span class="token operator">/</span>list<span class="token operator">></span>     <span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>     <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>map类型属性注入<span class="token operator">--</span><span class="token operator">></span>     <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"maps"</span><span class="token operator">></span>         <span class="token operator">&lt;</span>map<span class="token operator">></span>             <span class="token operator">&lt;</span>entry key<span class="token operator">=</span><span class="token string">"JAVA"</span> value<span class="token operator">=</span><span class="token string">"java"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>entry<span class="token operator">></span>             <span class="token operator">&lt;</span>entry key<span class="token operator">=</span><span class="token string">"PHP"</span> value<span class="token operator">=</span><span class="token string">"php"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>entry<span class="token operator">></span>         <span class="token operator">&lt;</span><span class="token operator">/</span>map<span class="token operator">></span>     <span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>     <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>set类型属性注入<span class="token operator">--</span><span class="token operator">></span>     <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"sets"</span><span class="token operator">></span>         <span class="token operator">&lt;</span>set<span class="token operator">></span>             <span class="token operator">&lt;</span>value<span class="token operator">></span>MySql<span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">></span>             <span class="token operator">&lt;</span>value<span class="token operator">></span>Redis<span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">></span>         <span class="token operator">&lt;</span><span class="token operator">/</span>set<span class="token operator">></span>     <span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span></code></pre><ol start="6"><li><h6 id="在集合中设置对象类型"><a href="#在集合中设置对象类型" class="headerlink" title="在集合中设置对象类型"></a>在集合中设置对象类型</h6><p>类似于外部bean注入</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>注入list集合类型，值是对象<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"student"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.spring5.collectiontype.Student"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"courseList"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>list<span class="token operator">></span>            <span class="token operator">&lt;</span>ref bean<span class="token operator">=</span><span class="token string">"course1"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>ref<span class="token operator">></span>            <span class="token operator">&lt;</span>ref bean<span class="token operator">=</span><span class="token string">"course2"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>ref<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>list<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>创建多个course对象<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"course1"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.spring5.collectiontype.Course"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"cname"</span> value<span class="token operator">=</span><span class="token string">"Spring5"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"course2"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.spring5.collectiontype.Course"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"cname"</span> value<span class="token operator">=</span><span class="token string">"Spring5"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span></code></pre></li></ol><ol start="7"><li><h6 id="把集合注入部分提取出来"><a href="#把集合注入部分提取出来" class="headerlink" title="把集合注入部分提取出来"></a>把集合注入部分提取出来</h6><p>(1) 在spring配置文件中引入名称空间util</p><pre class=" language-java"><code class="language-java">xmlns<span class="token operator">:</span>util<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/util"</span>xsi<span class="token operator">:</span>schemaLocation<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-beans.xsd"</span><span class="token operator">></span>"</code></pre><p>（2） 使用util标签</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token number">1</span><span class="token punctuation">.</span>提取list集合类型属性注入<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>util<span class="token operator">:</span>list id<span class="token operator">=</span><span class="token string">"bookList"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>value<span class="token operator">></span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">></span>    <span class="token operator">&lt;</span>value<span class="token operator">></span><span class="token number">4</span><span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">></span>    <span class="token operator">&lt;</span>value<span class="token operator">></span><span class="token number">3</span><span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>util<span class="token operator">:</span>list<span class="token operator">></span></code></pre><p>（3） 引入</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token number">2</span><span class="token punctuation">.</span>提取list集合类型属性注入使用<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"book"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.spring5.collectiontype.Book"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"list"</span> ref<span class="token operator">=</span><span class="token string">"bookList"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span></code></pre></li></ol><ol start="4"><li><h5 id="FactoryBean"><a href="#FactoryBean" class="headerlink" title="FactoryBean"></a>FactoryBean</h5><p>\1.   Spring有两种类型bean，一种普通bean，另一种工厂bean（FactoryBean）</p><p>\2.   普通Bean：在配置文件中定义的bean类型就是返回类型</p><p>\3.   工厂Bean: 在配置文件中定义的bean类型和返回类型可以不同</p></li></ol><p>   第一步：创建类，让这个类为工厂bean，实现接口FactoryBean</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>配置mybean，定义bean类型为MyBean<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"myBean"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.spring5.factorybean.MyBean"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>    <span class="token comment" spellcheck="true">//implements FactoryBean</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBean</span> <span class="token keyword">implements</span> <span class="token class-name">FactoryBean</span><span class="token operator">&lt;</span>Course<span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//定义返回的是course类型</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Course <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Course course<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Course</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        course<span class="token punctuation">.</span><span class="token function">setCname</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> course<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">getObjectType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>   第二步：实现接口里的方法，在实现的方法中定义返回的bean类型</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    ApplicationContext content<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"bean3.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//bean配置文件中定义类型是MyBean，返回类型是Course</span>    Course course<span class="token operator">=</span>content<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"myBean"</span><span class="token punctuation">,</span> Course<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>course<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                                 </code></pre><h5 id="3-3-Bean的作用域"><a href="#3-3-Bean的作用域" class="headerlink" title="3.3 Bean的作用域"></a>3.3 Bean的作用域</h5><ol><li><p>单例和多例</p><p>单例就是所有的请求都用一个对象来处理，多例就是每一个请求都用一个新对象来处理。</p><p>之所以用单例，是因为没必要每个请求都新建一个对象，这样子既浪费CPU又浪费内存。</p><p>之所以用多例，是为了防止并发问题；即一个请求改变了对象的状态，此时对象又处理另一个请求，而之前请求对对象状态的改变导致了对象对另一个请求做了错误的处理。</p><p>当对象含有可改变的状态时（更精确的说就是在实际应用中该状态会改变），则多例，否则单例；</p><p>在Spring默认模式下，bean是单实例对象</p></li></ol><ol start="2"><li>如何设置单实例还是多实例</li></ol><p>（1） bean标签中的scope属性</p><p>（2） scope属性值：</p><p>​    a.   默认值，singleton，表示单实例对象</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"book"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.spring5.collectiontype.Book"</span> scope<span class="token operator">=</span><span class="token string">"singleton"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span></code></pre><p>​    b.   prototype, 表示是多实例对象</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"book"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.spring5.collectiontype.Book"</span> scope<span class="token operator">=</span><span class="token string">"prototype"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span></code></pre><p>（3） singleton和prototype区别</p><p>​        scope的值是singleton时，加载spring配置文件时就会创建单实例对象；当scope的值是prototype时，在调用getBean方法时才创建多实例对象。</p><h5 id="3-4-bean生命周期"><a href="#3-4-bean生命周期" class="headerlink" title="3.4 bean生命周期"></a>3.4 bean生命周期</h5><p>（1）  通过构造器创建bean实例（无参构造）</p><p>（2） 为bean的属性设置值和其他bean的引用（调用set方法）</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Orders</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String oname<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//无参构造</span>    <span class="token keyword">public</span> <span class="token function">Orders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第一步 执行无参数构造创建bean实例"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setOname</span><span class="token punctuation">(</span>String oname<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>oname <span class="token operator">=</span> oname<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第二步 调用set方法设置属性的值"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//创建执行的初始化的方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第四步 调用bean的初始化方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>（3） 把bean实例传递给bean后置处理器的方法，调用bean初始化之前的方法</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> Object <span class="token function">postProcessBeforeInitialization</span><span class="token punctuation">(</span>Object bean<span class="token punctuation">,</span> String beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第三步 在初始化之前执行的方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> bean<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>（4） 调用bean的初始化的方法</p><p>（5）把bean实例传递给bean后置处理器的方法，调用bean初始化之后的方法</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> Object <span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span>Object bean<span class="token punctuation">,</span> String beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"在初始化之后执行的方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> bean<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>（6） 使用bean</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>初始化方法init<span class="token operator">-</span>method和销毁方法destroy<span class="token operator">-</span>method<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"orders"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.spring5.bean.Orders"</span> init<span class="token operator">-</span>method<span class="token operator">=</span><span class="token string">"initMethod"</span> destroy<span class="token operator">-</span>method<span class="token operator">=</span><span class="token string">"destroyMethod"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"oname"</span> value<span class="token operator">=</span><span class="token string">"手机"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span></code></pre><p>（7） 当容器关闭时，调用bean的销毁方法（需要进行配置销毁的方法）</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//ApplicationContext content=new ClassPathXmlApplicationContext("bean4.xml");</span>    <span class="token comment" spellcheck="true">//接口ApplicationContext里没有close方法，可以用它的子接口或者是实现类</span>    ClassPathXmlApplicationContext content <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"bean4.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Orders order<span class="token operator">=</span> content<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"orders"</span><span class="token punctuation">,</span>Orders<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第六步 获取创建bean实例对象，使用bean对象"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//bean实例需要用close方法手动销毁</span>    <span class="token comment" spellcheck="true">//ApplicationContext接口没有close方法，所以需要强转，或者不用ApplicationContext接口</span>    <span class="token punctuation">(</span><span class="token punctuation">(</span>ClassPathXmlApplicationContext<span class="token punctuation">)</span> content<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Spring学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue中main.js App.vue router.js等文件的简单介绍</title>
      <link href="posts/a1fb.html"/>
      <url>posts/a1fb.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、-main-js"><a href="#一、-main-js" class="headerlink" title="一、 main.js"></a>一、 main.js</h2><p>​        main.js是程序入口文件，在此文件中初始化实例，设定实例挂载的位置，并使用需要的插件及加载各种公共组件。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 初始化实例并使用需要的插件,加载各种公共组件。</span><span class="token comment" spellcheck="true">// 设定实例需要挂载的位置</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span> <span class="token comment" spellcheck="true">// 根组件</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">'./router/router'</span><span class="token keyword">import</span> <span class="token string">'./plugins/element.js'</span><span class="token keyword">import</span> <span class="token string">'./assets/css/global.css'</span> <span class="token comment" spellcheck="true">// 全局样式</span><span class="token comment" spellcheck="true">// 导入字体图标</span><span class="token keyword">import</span> <span class="token string">'./assets/fonts/iconfont.css'</span><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span> <span class="token comment" spellcheck="true">// 导入axios包</span>axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>baseURL <span class="token operator">=</span> <span class="token string">'http://timemeetyou.com:8889/api/private/v1/'</span> <span class="token comment" spellcheck="true">// 配置请求的根路径</span>Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$http <span class="token operator">=</span> axios <span class="token comment" spellcheck="true">// 将axios包挂载到vue的原型对象上，然后每一个vue组件都可以通过this直接访问到$http (),从而去发起ajax请求</span>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  router<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 挂载路由</span>  render<span class="token punctuation">:</span> h <span class="token operator">=</span><span class="token operator">></span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// render函数的作用就是将App那个vue组件渲染成DOM节点,放到页面中去展示。</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/** 另一种写法 * new Vue(&amp;#123; *    el: '#app', *    router, *    render: h => h(App) * &amp;#125;) */</span></code></pre><p>​        import…from…指引用一些包和组件，from后面跟路径格式，若只给出vue， axios这样的包名，则会自动到node_modules中加载。</p><h2 id="二、App-vue"><a href="#二、App-vue" class="headerlink" title="二、App.vue"></a>二、App.vue</h2><p>​        App.vue是根组件，也是页面入口文件，所有的页面都在App.vue下进行切换。它负责构建定义及页面组件归集。</p><p>​        一个标准的App.vue模板包含<template></template>、<script></script>、<style></style>三部分</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>路由占位符<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>router<span class="token operator">-</span>view<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>通过路由匹配到的组件都会渲染到router<span class="token operator">-</span>view里面展示<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>view<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  name<span class="token punctuation">:</span> <span class="token string">'app'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre><p>​        在App.vue中有一个<router-view>标签，用来做路由的占位符，由路由匹配到的组件会渲染在<router-view>里展示。</router-view></router-view></p><h2 id="三、router-js"><a href="#三、router-js" class="headerlink" title="三、router.js"></a>三、router.js</h2><p>​        为新建的组件配置路由，通过路由匹配到的组件都会渲染到App.vue里面<router-view>里面展示.</router-view></p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> Router <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token keyword">import</span> Login <span class="token keyword">from</span> <span class="token string">'../components/Login.vue'</span><span class="token keyword">import</span> Home <span class="token keyword">from</span> <span class="token string">'../components/Home.vue'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Router<span class="token punctuation">)</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> path<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span> redirect<span class="token punctuation">:</span> <span class="token string">'/login'</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// rediect是重定向，当用户访问/地址时，将地址重定向到/login</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> path<span class="token punctuation">:</span> <span class="token string">'/login'</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> Login <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 当用户访问path时，通过component属性指定要展示的组件</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> path<span class="token punctuation">:</span> <span class="token string">'/home'</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> Home <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 配置home组件的路由地址</span>  <span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 挂载导航守卫</span><span class="token comment" spellcheck="true">// 路由导航守卫beforeEach（）控制访问权限</span><span class="token comment" spellcheck="true">// to:将要访问的页面路径 from：从哪个路径跳转而来 next：放行函数(next():直接放行   next('/login')强制跳转到某路径)</span>router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>to<span class="token punctuation">.</span>path <span class="token operator">===</span> <span class="token string">'/login'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 如果用户访问的登录页，直接放行</span>    <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> tokenStr <span class="token operator">=</span> window<span class="token punctuation">.</span>sessionStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'token'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 从sessionStorage中获取到保存的token值</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>tokenStr<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 没有token，强制跳转到登录页</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 有token说明已登录，放行</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> router <span class="token comment" spellcheck="true">// 外部能够读取模块内部</span></code></pre><h2 id="四、element-js"><a href="#四、element-js" class="headerlink" title="四、element.js"></a>四、element.js</h2><p>​        element.js中导入一些element组件</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token comment" spellcheck="true">// 导入element组件</span><span class="token keyword">import</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> Button<span class="token punctuation">,</span> Form<span class="token punctuation">,</span> FormItem<span class="token punctuation">,</span> Input<span class="token punctuation">,</span> Message <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">'element-ui'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Button<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 注册为全局可用</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Form<span class="token punctuation">)</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>FormItem<span class="token punctuation">)</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Input<span class="token punctuation">)</span>Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$message <span class="token operator">=</span> Message <span class="token comment" spellcheck="true">// Message需要全局挂载，将Message挂载为vue的属性，然后就可以用this调用</span></code></pre><p>​        导入element组件后，注册为全局可用或者全局挂载。</p><h2 id="五、index-html"><a href="#五、index-html" class="headerlink" title="五、index.html"></a>五、index.html</h2><p>​        项目运行入口</p><h2 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h2><p>​        项目加载过程：index.html –&gt; main.js –&gt;  app.vue –&gt;  router.js  –&gt;单文件组件（.vue ）</p><p>​        main.js初始化vue实例，并在index.html中找到需要挂载的位置；然后加载App.vue, 其模板（<template>）中的内容会取代挂载处的内容；接着会加载router.js, 找到单文件组件的路由地址；通过路由地址找到.vue单文件组件后，渲染到App.vue中的<router-view>标签中展示。</router-view></template></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习笔记</title>
      <link href="posts/e0b8.html"/>
      <url>posts/e0b8.html</url>
      
        <content type="html"><![CDATA[<h1 id="一-简介"><a href="#一-简介" class="headerlink" title="一. 简介"></a>一. 简介</h1><p>​    Vue 是一套构建用户界面的渐进式框架，它只关注视图层， 采用自底向上增量开发的设计，目标是通过尽可能简单的 API 实现响应的数据绑定和组合的视图组件。</p><p>学习Vue之前需要掌握：</p><p>​        html   css   javascript   ajax</p><h3 id="创建一个Vue"><a href="#创建一个Vue" class="headerlink" title="创建一个Vue"></a>创建一个Vue</h3><p>步骤：</p><ol><li>导入Vue</li></ol><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><ol start="2"><li>写html</li></ol><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#123;">&amp;#123;</span>message<span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--&amp;#123;&amp;#123;&amp;#125;&amp;#125;：插值表达式；模板表达式--></span>```3. 写js ```html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">let</span> app<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                message<span class="token punctuation">:</span> <span class="token string">'Hello Vue!'</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span> ```##### data：数据对象vue中用到的数据定义在data中。data中可以写复杂类型的数据。渲染复杂的数据类型时，遵守js语法即可，列如对象的点语法，数组的索引语法。##### el:挂载点通过css选择器设置vue实例管理元素，设置完后el命中的元素内部中两个大括号括起来的部分就会被data中同名的数据给替换掉。##### 几个小问题：1. Vue实例的作用范围？   el命中的元素及元素内部的后代元素,外部不可以。   2. 是否可以使用其他选择器？   可以，class也能用，直接选择标签也可以，但是只支持双标签，不支持单标签。 一般推荐使用id选择器，语义清晰。   3. 是否可以设置其他dom元素？   可以使用双标签，不能使用html和body。### Vue定义数组对象```html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">       <span class="token keyword">var</span> app<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//el:".app",</span>           el<span class="token punctuation">:</span><span class="token string">"div"</span><span class="token punctuation">,</span>           data<span class="token punctuation">:</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>               message<span class="token punctuation">:</span> <span class="token string">"黑马"</span><span class="token punctuation">,</span>               school<span class="token punctuation">:</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">//可以定义对象</span>                   name<span class="token punctuation">:</span><span class="token string">"Evan"</span><span class="token punctuation">,</span>                   mobile<span class="token punctuation">:</span><span class="token string">"13888888888"</span>               <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>                  campus<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">"农大"</span><span class="token punctuation">,</span><span class="token string">'清华'</span><span class="token punctuation">,</span><span class="token string">"北大"</span><span class="token punctuation">]</span>     <span class="token comment" spellcheck="true">//可以定义数组</span>           <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>       <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span> </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>```##### 如何使用定义的对象和数组：```html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#123;">&amp;#123;</span>message<span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        <span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#123;">&amp;#123;</span>school<span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span>              <span class="token comment" spellcheck="true">&lt;!--展示对象--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#123;">&amp;#123;</span>school.name<span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span>     <span class="token comment" spellcheck="true">&lt;!--展示对象的具体属性--></span>            <span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#123;">&amp;#123;</span>school.mobile<span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>                <span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#123;">&amp;#123;</span>campus<span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span>      <span class="token comment" spellcheck="true">&lt;!--展示数组--></span>                      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>                <span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#123;">&amp;#123;</span>campus[0]<span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span>    <span class="token comment" spellcheck="true">&lt;!--展示数组具体元素--></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>                <span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#123;">&amp;#123;</span>campus[1]<span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h3 id="用Vue开发网页"><a href="#用Vue开发网页" class="headerlink" title="用Vue开发网页"></a>用Vue开发网页</h3><h4 id="Vue指令："><a href="#Vue指令：" class="headerlink" title="Vue指令："></a>Vue指令：</h4><ol><li>内容绑定，事件绑定</li></ol><p>​            v-text  v-html  v-on</p><ol start="2"><li>显示切换，属性绑定</li></ol><p>​           v-show  v-if    v-bind</p><ol start="3"><li>列表循环，表单元素绑定</li></ol><p>​           v-for     v-on    v-model</p><h4 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h4><ol><li><p>设置标签内的文本值（textContent）。无论内容是什么，只会解析为文本。</p></li><li><p>默认写法会替换掉原来的值，使用差值表达式可以替换指定内容。</p></li><li><p>支持内部写表示式。</p></li></ol><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">       <span class="token keyword">var</span> app<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//el:".app",</span>           el<span class="token punctuation">:</span><span class="token string">"div"</span><span class="token punctuation">,</span>           data<span class="token punctuation">:</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>              message<span class="token punctuation">:</span><span class="token string">"Vue!"</span><span class="token punctuation">,</span>              info<span class="token punctuation">:</span><span class="token string">"前端"</span>           <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>       <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">v-text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>合肥<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!--覆盖掉标签内的值--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">v-text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>合肥<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!--覆盖掉标签内的值--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#123;">&amp;#123;</span>message+"!"<span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span>合肥<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--这种写法不会覆盖--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h5 id="字符串拼接："><a href="#字符串拼接：" class="headerlink" title="字符串拼接："></a>字符串拼接：</h5><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">v-text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message+<span class="token punctuation">'</span>!<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>合肥<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">v-text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>info+<span class="token punctuation">'</span>!<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>合肥<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#123;">&amp;#123;</span>message+"!"<span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span>合肥<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>     </code></pre><h4 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h4><p>设置标签的innerHTML，如果内容中有html结构，html就可以被直接解析出来。如果只是文本，和v-text功能一样。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">       <span class="token keyword">var</span> app<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//el:"#app",</span>           el<span class="token punctuation">:</span><span class="token string">"div"</span><span class="token punctuation">,</span>           data<span class="token punctuation">:</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>              message<span class="token punctuation">:</span><span class="token string">"Vue"</span><span class="token punctuation">,</span>              content<span class="token punctuation">:</span><span class="token string">"&lt;a href='#'>程序员&lt;/a>"</span><span class="token punctuation">,</span>              info<span class="token punctuation">:</span><span class="token string">"前端"</span>           <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!--v-text只返回文本值--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-html</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h4 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h4><p>为元素绑定事件,事件名不需要写on。指令可以简写为@。绑定的方法定义在methods属性中。方法内部通过this关键字可以访问定义在data中的数据。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">       <span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>           el<span class="token punctuation">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>           data<span class="token punctuation">:</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>               food<span class="token punctuation">:</span><span class="token string">"西蓝花炒蛋"</span>           <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>           methods<span class="token punctuation">:</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//method是方法集合</span>               doIt<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//doIt是方法名</span>                   <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"做IT"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>               changeFood<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">//console.log(this.food);</span>                   <span class="token keyword">this</span><span class="token punctuation">.</span>food<span class="token operator">+</span><span class="token operator">=</span><span class="token string">"好好吃!"</span>  <span class="token comment" spellcheck="true">//this可以调用和修改data里的数据</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>           <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>       <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>v-on指令<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doIt<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>v-on简写<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doIt<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>双击事件<span class="token punctuation">"</span></span> <span class="token attr-name">@dblclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doIt<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>changeFood<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#123;">&amp;#123;</span>food<span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!--点击调用changeFood方法--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h4 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h4><p>根据表达式值的真假，切换元素的显示和隐藏。原理是修改元素的display，实现显示隐藏。</p><p>指令后面的内容，最终都会解析为布尔值。值为true元素显示，false元素隐藏。</p><p>数据改变之后，对应元素的显示状态会同步更新。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>images/2031653.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!--这种写法是不可以更改的--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>images/325530.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>isShow<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!--这种写法可以在data里面更改的--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>images/325530.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">></span><span class="token punctuation">=</span>18<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!--根据表达式的值决定是否显示--></span>    <span class="token comment" spellcheck="true">&lt;!--点击自动切换--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>切换显示状态<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>changeIsShow<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">let</span> app<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      el<span class="token punctuation">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        isShow<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>        age<span class="token punctuation">:</span><span class="token number">16</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>      methods<span class="token punctuation">:</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        changeIsShow<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>isShow<span class="token operator">=</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>isShow<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h4><p>根据表达值的真假，切换元素的显示和隐藏（操纵dom元素）。</p><p>v-show操纵的是样式，v-if操纵的是dom。</p><p>当表达式的值为true，元素存于dom树中，false，从dom树中移除。</p><p>使用时，平凡切换时使用v-show，反之用v-if。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是一个p标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!--布尔值--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>显示/隐藏<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>toggleIsShow<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>isShow<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是一个p标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!--函数--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>temperature<span class="token punctuation">></span><span class="token punctuation">=</span>35<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>热死啦<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!--表达式--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">let</span> app<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      el<span class="token punctuation">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        isShow<span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>        temperature<span class="token punctuation">:</span><span class="token number">36</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>      methods<span class="token punctuation">:</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        toggleIsShow<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//点击切换isShow的值</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>isShow<span class="token operator">=</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>isShow<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>              <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h4><p>设置元素属性（例：src，titlt，class）</p><p>完整写法：v-bind：属性名=”内容”，简写可以省略v-blind，只保留 ：属性名</p><p>如果动态的增删class，建议使用对象的方式。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>imgSrc<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-bind:</span>title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>imgTitle+<span class="token punctuation">'</span>!!!<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">:src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>imgSrc<span class="token punctuation">"</span></span> <span class="token attr-name">:title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>imgTitle+<span class="token punctuation">'</span>!!!<span class="token punctuation">'</span><span class="token punctuation">"</span></span>     <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>isActive?<span class="token punctuation">'</span>active<span class="token punctuation">'</span>:<span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>toggleActive<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!--简写可以省略v-bind，只留下：--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">:src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>imgSrc<span class="token punctuation">"</span></span> <span class="token attr-name">:title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>imgTitle+<span class="token punctuation">'</span>!!!<span class="token punctuation">'</span><span class="token punctuation">"</span></span>     <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&amp;#123;active:isActive&amp;#125;<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>toggleActive<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">!—对象方式：&amp;#123;active:</span>isActive&amp;#125;表示是否等于active取决于isActive是否等于true--</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">let</span> app<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      el<span class="token punctuation">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        imgSrc<span class="token punctuation">:</span><span class="token string">"Images/325530.jpg"</span><span class="token punctuation">,</span>        imgTitle<span class="token punctuation">:</span><span class="token string">"图片"</span><span class="token punctuation">,</span>        isActive<span class="token punctuation">:</span><span class="token boolean">false</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>      methods<span class="token punctuation">:</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        toggleActive<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//点击切换isActive的值</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>isActive<span class="token operator">=</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>isActive<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>              <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h4><p>根据数据生成列表结构,数组经常和v-for结合使用。语法是（item,index） in arr。Item和index可以结合其他指令一起使用。数组长度的更新会同步到页面上，是响应式的。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>添加数据<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>add<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>移除数据<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>remove<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(item,index) in arr<span class="token punctuation">"</span></span> <span class="token attr-name">:title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token comment" spellcheck="true">&lt;!--(item,index)对应元素值和索引--></span>                <span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#123;">&amp;#123;</span>index+1+"."<span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span> <span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#123;">&amp;#123;</span>item<span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(item,index) in heros<span class="token punctuation">"</span></span> <span class="token attr-name">:title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                  <span class="token comment" spellcheck="true">&lt;!--objArr中存的是对象--></span>                名字：<span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#123;">&amp;#123;</span>item.name<span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">       <span class="token keyword">let</span> app<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>           el<span class="token punctuation">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>           data<span class="token punctuation">:</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>               arr<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">"德莱文"</span><span class="token punctuation">,</span><span class="token string">"杰斯"</span><span class="token punctuation">,</span><span class="token string">"诺手"</span><span class="token punctuation">,</span><span class="token string">"艾希"</span><span class="token punctuation">,</span><span class="token string">"蛮王"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               heros<span class="token punctuation">:</span><span class="token punctuation">[</span>                   <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>name<span class="token punctuation">:</span><span class="token string">"jack"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>                   <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>name<span class="token punctuation">:</span><span class="token string">"rose"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>               <span class="token punctuation">]</span>           <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>           methods<span class="token punctuation">:</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>               add<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                   <span class="token keyword">this</span><span class="token punctuation">.</span>heros<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>name<span class="token punctuation">:</span><span class="token string">"jack"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>               remove<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                   <span class="token keyword">this</span><span class="token punctuation">.</span>heros<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>           <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>       <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="v-on补充"><a href="#v-on补充" class="headerlink" title="v-on补充"></a>v-on补充</h4><p>传递自定义参数，事件修饰符。事件绑定的方法写成函数调用的形式，可以传入自定义参数。</p><p>定义方法时需要定义形参来接收传入的实参。事件的后面可以跟上.修饰符可以对事件进行限制。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--v-on可以传递多个参数，在对应的函数方法中也要设置相应的形参--></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>点击<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doIt(666,<span class="token punctuation">'</span>老铁<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token comment" spellcheck="true">&lt;!--v-on也可以使用事件修饰符--></span>       <span class="token comment" spellcheck="true">&lt;!--keyup是修饰符，指键盘按钮弹起时触发事件；设置具体按钮可以写成 keyup.特定按钮--></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">@keyup.enter</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sayHi<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">let</span> app<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            el<span class="token punctuation">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>            methods<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                doIt<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span>p2<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"做IT"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>                sayHi<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"吃了没"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>更多修饰符可以参考官方文档：</p><p><a href="https://cn.vuejs.org/v2/api/#v-on">https://cn.vuejs.org/v2/api/#v-on</a></p><h4 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h4><p>获取和设置表单元素的值（双向数据绑定），绑定的数据会和表单元素值相关联。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--v-model获取表单元素的内容--></span>        <span class="token comment" spellcheck="true">&lt;!--在表单中修改值时，对应data中的值也会被同步修改--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span> <span class="token attr-name">@keyup.enter</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getM<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--修改data中的值时，表单中的值也会被修改--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>修改message<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>setM<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#123;">&amp;#123;</span>message<span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">let</span> app<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            el<span class="token punctuation">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                message<span class="token punctuation">:</span><span class="token string">"Vue"</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>            methods<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                getM<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>                setM<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span><span class="token string">"酷丁鱼"</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript数组用法浅析</title>
      <link href="posts/a65c.html"/>
      <url>posts/a65c.html</url>
      
        <content type="html"><![CDATA[<h2 id="Array基础"><a href="#Array基础" class="headerlink" title="Array基础"></a>Array基础</h2><h3 id="创建一个数组"><a href="#创建一个数组" class="headerlink" title="创建一个数组"></a>创建一个数组</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//字面量方法：</span><span class="token keyword">let</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第二种：</span><span class="token keyword">let</span> arr1<span class="token operator">=</span><span class="token function">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> arr2<span class="token operator">=</span><span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//固定数组大小</span><span class="token keyword">let</span> arr3<span class="token operator">=</span><span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//直接赋值</span><span class="token comment" spellcheck="true">//new方法</span><span class="token keyword">let</span> arr4<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> arr5<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> arr6<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Array()和new Array()没有什么大的区别,当初始化一个空数组时候，两者性能几乎没有差异。</span><span class="token comment" spellcheck="true">//从语言特性上讲，JS是一个基于原型继承的语言。无论是new的引入，以及在ES6中引入的Class语法糖，都</span><span class="token comment" spellcheck="true">//是为了将JS进一步向对象化的方向进行过度。虽然使用new，会增加多一层的对象包裹，而使得内存冗余,但使用了new后更加符合了对象化继承的概念。</span></code></pre><h3 id="构造函数上的方法"><a href="#构造函数上的方法" class="headerlink" title="构造函数上的方法"></a>构造函数上的方法</h3><h4 id="Array-of"><a href="#Array-of" class="headerlink" title="Array.of()"></a>Array.of()</h4><p>创建一个新数组的实例</p><p>语法：</p><pre class=" language-js"><code class="language-js">Array<span class="token punctuation">.</span><span class="token keyword">of</span><span class="token punctuation">(</span>element0<span class="token punctuation">[</span><span class="token punctuation">,</span> element1<span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">[</span><span class="token punctuation">,</span> elementN<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>用法：</p><pre class=" language-js"><code class="language-js">Array<span class="token punctuation">.</span><span class="token keyword">of</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//[3]</span>Array<span class="token punctuation">.</span><span class="token keyword">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//[1,2,3]</span></code></pre><p>与Array的区别：</p><p>Array.of(3)是创建一个具有单个元素7的数组，而Array(7)是创建一个长度为7的空(empty)数组。</p><h4 id="Array-isArray"><a href="#Array-isArray" class="headerlink" title="Array.isArray()"></a>Array.isArray()</h4><p>用于确定传递的值是否是一个Array。</p><pre class=" language-js"><code class="language-js">Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//true</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>foo<span class="token punctuation">:</span> <span class="token number">123</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//false</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>undefined<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//false</span></code></pre><h4 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from()"></a>Array.from()</h4><p>从一个类似数组或可迭代对象创建一个新的、浅拷贝的数组实例。</p><p>语法：</p><pre class=" language-js"><code class="language-js">Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>arrayLike<span class="token punctuation">,</span> mapFunction<span class="token punctuation">,</span> thisArg<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>参数：</p><ol><li>arrayLike：必选，要转换成数组的对象。可以传入类数组（argument）和可迭代对象（set， map）。</li><li>mapFunctionn：可选，数组中每个元素都要调用的对象。相当于Array.from(arrayLike).map(mapFunction, thisArg)。</li><li>thisArg：可选，映射函数(mapFunction)中的 this 对象。</li></ol><p>用法：</p><p>1.将字符串转换成数组</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> str<span class="token operator">=</span><span class="token string">'hello!'</span><span class="token punctuation">;</span><span class="token keyword">let</span> arr<span class="token operator">=</span>Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//['h','e','l','l','o']</span></code></pre><p>2.将set结构的数据转换成数组</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> arr<span class="token operator">=</span>Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//[1,2,3,4]; 同时会去重。</span></code></pre><p>3.map()</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> map<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//[[1,2],[2,4],[3,4]]</span></code></pre><p>4.类数组</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//[1,2,3]</span><span class="token keyword">let</span> array <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token number">0</span><span class="token punctuation">:</span> <span class="token string">'name'</span><span class="token punctuation">,</span>     <span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">'age'</span><span class="token punctuation">,</span>    <span class="token number">2</span><span class="token punctuation">:</span> <span class="token string">'sex'</span><span class="token punctuation">,</span>    <span class="token number">3</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'user1'</span><span class="token punctuation">,</span><span class="token string">'user2'</span><span class="token punctuation">,</span><span class="token string">'user3'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'length'</span><span class="token punctuation">:</span> <span class="token number">4</span>     <span class="token comment" spellcheck="true">//这里的length属性值决定返回数组的大小，若没有length属性，则返回空数组。</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这里对象的属性名必须是数字，否则返回的数组为undefined。</span><span class="token keyword">let</span> arr <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>array <span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// ['name','age','sex',['user1','user2','user3']]</span></code></pre><p>5.对数组进行操作</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token keyword">set</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">set</span><span class="token punctuation">,</span> item<span class="token operator">=</span><span class="token operator">></span>item<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 类map方法，每个元素进行处理，将处理后的值放入返回的数组。</span>                              <span class="token comment" spellcheck="true">//[2,3,4]</span></code></pre><p>6.thisArg</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> arr<span class="token operator">=</span>Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> x<span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>a<span class="token punctuation">:</span><span class="token number">3</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//[4,5,6]</span>                   <span class="token comment" spellcheck="true">//function里的this就指向了&amp;#123;a:3&amp;#125;;</span><span class="token keyword">const</span> obj<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    handle<span class="token punctuation">:</span> x<span class="token operator">=</span><span class="token operator">></span>x<span class="token operator">*</span><span class="token number">4</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//[4,8,12]</span>                   <span class="token comment" spellcheck="true">//function里的this指向obj,调用obj里面的handle(x)方法</span></code></pre><h2 id="常见方法"><a href="#常见方法" class="headerlink" title="常见方法"></a>常见方法</h2><h3 id="遍历方法"><a href="#遍历方法" class="headerlink" title="遍历方法"></a>遍历方法</h3><p>js中遍历数组并不会改变原始数组的方法共有12个：</p><pre class=" language-js"><code class="language-js">ES5：forEach、every、some、filter、map、reduce、reduceRightES6：find、findIndex、keys、values、entries</code></pre><h4 id="forEach"><a href="#forEach" class="headerlink" title="forEach()"></a>forEach()</h4><p>语法：</p><p>array.forEach(func(currentValue, index, arr), thisArg)</p><p>参数：</p><p>func(): 数组中每个元素需要调用的函数。</p><p>​    currentValue: 必需，数组中正在处理的当前元素</p><p>​    index: 可选，数组中正在处理的当前元素的索引</p><p>​    arr: 可选，forEach() 方法正在操作的数组</p><p>thisArg: 可选参数,当执行回调函数,用作this值</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    array<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">==</span>value<span class="token punctuation">;</span>    sum<span class="token operator">+</span><span class="token operator">=</span>value<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//10</span></code></pre><h4 id="every"><a href="#every" class="headerlink" title="every()"></a>every()</h4><p>测试一个数组内<u>所有元素</u>是否都能通过某个指定函数的测试。它返回一个布尔值。</p><p>语法：</p><pre class=" language-js"><code class="language-js">array<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token function">func</span><span class="token punctuation">(</span>currentValue<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">,</span> thisArg<span class="token punctuation">)</span></code></pre><p>参数：</p><p>func: 数组中每个元素执行的函数，该函数接收一至三个参数。</p><p>​    currentValue：必需，数组中正在处理的当前元素</p><p>​    index：可选，数组中正在处理的当前元素的索引</p><p>​    arr：可选，every() 方法正在操作的数组</p><p>thisArg：可选参数,当执行回调函数func, 用作this值</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">isBigEnough</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span>index<span class="token punctuation">,</span>array<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> element <span class="token operator">>=</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span>isBigEnough<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//false</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">48</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span>isBigEnough<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true</span></code></pre><p>注意：</p><ol><li>空数组的情况下，只要第一个参数是回调函数，一切情况返回为true。</li><li>要每次返回值都为true,最后返回true,否则为false。</li><li>every不会改变原数组。</li></ol><h4 id="some"><a href="#some" class="headerlink" title="some"></a>some</h4><p>测试数组中是不是<u>至少有1个元素</u>通过了被提供的函数测试。它返回的是一个Boolean类型的值。</p><p>语法：</p><p>array.some(func(currentValue, index, arr), thisArg)</p><p>参数：</p><p>func: 数组中每个元素执行的函数，该函数接收一至三个参数。</p><p>​    currentValue：必需，数组中正在处理的当前元素。</p><p>​    index：可选，数组中正在处理的当前元素的索引。</p><p>​    arr：可选，some() 方法正在操作的数组。</p><p>thisArg：可选参数,当执行回调函数func, 用作this值。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">isBiggerThan10</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> element<span class="token operator">></span><span class="token number">10</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>isBiggerThan10<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// false</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>isBiggerThan10<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span><span class="token comment" spellcheck="true">/*--------------------------------------------------------*/</span><span class="token keyword">let</span> fruit<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'banana'</span><span class="token punctuation">,</span> <span class="token string">'mango'</span><span class="token punctuation">,</span> <span class="token string">'guava'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">checkAvailability</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>arrVal<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> val<span class="token operator">===</span>arrVal<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">checkAvailability</span><span class="token punctuation">(</span>fruits<span class="token punctuation">,</span> <span class="token string">'kela'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// false</span><span class="token function">checkAvailability</span><span class="token punctuation">(</span>fruits<span class="token punctuation">,</span> <span class="token string">'banana'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// true</span></code></pre><p>注意：</p><ol><li>some不会改变原数组.</li><li>如果用一个空数组进行测试，在任何情况下它返回的都是false。</li><li>如果你回调函数没有返回值，每次都是undefined，最后调用some结果返回也是false.</li></ol><h4 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h4><p>定义：</p><p>创建一个新数组, 其包含通过所提供函数实现的测试的所有元素。</p><p>语法：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> newArray <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token function">func</span><span class="token punctuation">(</span>currentValue<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">,</span> thisArg<span class="token punctuation">)</span></code></pre><p>参数：</p><p>func: 数组中每个元素执行的函数，该函数接收一至三个参数。</p><p>​    currentValue：必需，数组中正在处理的当前元素。</p><p>​    index：可选，数组中正在处理的当前元素的索引。</p><p>​    arr：可选，filter() 方法正在操作的数组。</p><p>thisArg：可选参数,当执行回调函数func, 用作this值。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">isBigEnough</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> element <span class="token operator">>=</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">let</span> filtered<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>isBigEnough<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//[12,15,11]</span><span class="token comment" spellcheck="true">/*-------------------------------------------------------------*/</span><span class="token keyword">let</span> fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'banana'</span><span class="token punctuation">,</span> <span class="token string">'grapes'</span><span class="token punctuation">,</span> <span class="token string">'mango'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//字符串匹配</span><span class="token keyword">function</span> <span class="token function">filterItems</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> fruits<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> el<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>query<span class="token punctuation">.</span><span class="token function">toLowCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">filterItems</span><span class="token punctuation">(</span><span class="token string">'ap'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ['apple', 'grapes']</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">filterItems</span><span class="token punctuation">(</span><span class="token string">'an'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ['banana', 'mango', 'orange']</span></code></pre><p>注意：</p><ol><li>自定义回调函数要有Boolean返回值，不写默认返回undefined，则转Boolean为false。</li><li>不会修改原始数组，但是会返回一个新数组，包含通过所提供函数实现的测试所以元素。</li><li>没有任何元素通过的话，返回空数组。</li></ol><h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><p>创建一个新数组，其结果是该数组中的每个元素是调用一次提供的回调函数后的返回值。</p><p>语法：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> newArray <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>currentValue<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">,</span> thisArg<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>参数：</p><p>func: 数组中每个元素执行的函数，该函数接收一至三个参数。</p><p>​    currentValue：必需，数组中正在处理的当前元素。</p><p>​    index：可选，数组中正在处理的当前元素的索引。</p><p>​    arr：可选，map() 方法正在操作的数组。</p><p>thisArg：可选参数,当执行回调函数func, 用作this值。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> roots<span class="token operator">=</span>numbers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>sqrt<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//[1,2,3]</span><span class="token comment" spellcheck="true">/*----------------------------------------------*/</span><span class="token keyword">let</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> doubles<span class="token operator">=</span>numbers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> num<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//[2, 8, 18]</span></code></pre><p>注意： </p><ol><li>map不修改调用它的原数组本身。</li><li>回调函数不返回值时，最后新数组的每个值都为undefined。</li><li>因为map生成一个新数组，当你不打算使用返回的新数组，请用forEach或者for-of替代。</li></ol><h4 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h4><p>对数组中的每个元素执行一个用户提供的<strong>「reducer」</strong>函数(升序执行)，将其结果汇总为单个返回值。</p><p>语法：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> result <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token function">func</span><span class="token punctuation">(</span>accumulator<span class="token punctuation">,</span> currentValue<span class="token punctuation">,</span> currentIndex<span class="token punctuation">,</span>                        array<span class="token punctuation">)</span><span class="token punctuation">,</span> initialValue<span class="token punctuation">)</span></code></pre><p>参数：</p><p>func: 为数组中每个元素执行的函数，该函数接收一至4个参数</p><p>​    accumulator: 累计器</p><p>​    currretValue：当前值</p><p>​    currentIndex：当前索引</p><pre><code> array：数组</code></pre><p>initialValue：作为第一次调用 func函数时的第一个参数的值。 如果没有提供初始值，则将使用数组中    的第一个元素。 在没有初始值的空数组上调用 reduce 将报错。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> a<span class="token operator">=</span>arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span>t<span class="token operator">+</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//6</span><span class="token comment" spellcheck="true">//等同于</span><span class="token keyword">let</span> b<span class="token operator">=</span>arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span>t<span class="token operator">+</span>v<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>注意：</p><ol><li>回调函数第一次执行时，accumulator 和currentValue的取值有两种情况：如果调用reduce()时提供了initialValue，accumulator取值为initialValue，currentValue取数组中的第一个值；如果没有提供 initialValue，那么accumulator取数组中的第一个值，currentValue取数组中的第二个值。</li><li>如果数组为空且没有提供initialValue，会抛出TypeError 。</li></ol><h4 id="reduceRight"><a href="#reduceRight" class="headerlink" title="reduceRight"></a>reduceRight</h4><p>接受一个函数作为累加器（accumulator）和数组的每个值（<u>从右到左</u>）为单个值，将其结果汇总为单个返回值。</p><p>语法：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> result<span class="token operator">=</span>array<span class="token punctuation">.</span><span class="token function">reduceRight</span><span class="token punctuation">(</span><span class="token function">func</span><span class="token punctuation">(</span>accumulator<span class="token punctuation">,</span> currentValue<span class="token punctuation">,</span> currentIndex<span class="token punctuation">)</span><span class="token punctuation">,</span>                 initialValue<span class="token punctuation">)</span></code></pre><p>参数：</p><p>func: 为数组中每个元素执行的函数，该函数接收一至4个参数</p><p>​    accumulator: 累计器</p><p>​    currretValue：当前值</p><p>​    currentIndex：当前索引</p><pre><code> array：数组</code></pre><p>initialValue：作为第一次调用 func函数时的第一个参数的值。 如果没有提供初始值，则将使用数组中    的第一个元素。 在没有初始值的空数组上调用 reduce 将报错。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token string">'5'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> left<span class="token operator">=</span>a<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> cur<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">return</span> prev<span class="token operator">+</span>cur<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> right<span class="token operator">=</span>a<span class="token punctuation">.</span><span class="token function">reduceRight</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> cur<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">return</span> prev<span class="token operator">+</span>cur<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// "12345"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "54321"</span></code></pre><h4 id="find"><a href="#find" class="headerlink" title="find"></a>find</h4><p>返回数组中满足提供的测试函数的第一个元素的值。否则返回 undefined。</p><p>语法：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> elem<span class="token operator">=</span>array<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token function">func</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">,</span> thisArg<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>参数：</p><p>func: 为数组中每个元素执行的函数，该函数接收一至三个参数<br>   elemnet: 数组中正在处理的当前元素<br>   index: (可选) 数组中正在处理的当前元素的索引<br>   arr: (可选)   find方法正在操作的数组<br> thisArg:   可选参数,当执行回调函数callback,用作this值</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">isPrime</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> start<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>start<span class="token operator">&lt;=</span>Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>element <span class="token operator">%</span> start<span class="token operator">++</span><span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> element<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>isPrime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined, not found</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>isPrime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 5</span></code></pre><h4 id="finIndex"><a href="#finIndex" class="headerlink" title="finIndex"></a>finIndex</h4><p>返回数组中通过测试函数的第一个元素的索引，否则返回-1</p><p>语法：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> elemIndex<span class="token operator">=</span>array<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token function">func</span><span class="token punctuation">(</span>elemnet<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">,</span> thisArg<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>参数：</p><p>func: 为数组中每个元素执行的函数，该函数接收一至三个参数<br>   elemnet: 数组中正在处理的当前元素<br>   index: (可选) 数组中正在处理的当前元素的索引<br>   arr: (可选)   find方法正在操作的数组<br> thisArg:   可选参数,当执行回调函数callback,用作this值</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">isPrime</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> start <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;=</span> Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>element <span class="token operator">%</span> start<span class="token operator">++</span> <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> element <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span>isPrime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -1, not found</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span>isPrime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span></code></pre><h4 id="keys-amp-values-amp-entries"><a href="#keys-amp-values-amp-entries" class="headerlink" title="keys &amp; values &amp; entries"></a>keys &amp; values &amp; entries</h4><p>keys()方法返回一个包含数组中每个索引键的Array iterator对象。</p><p>values()方法返回一个新的 Array Iterator对象，该对象包含数组每个索引的值。</p><p>entries()方法返回一个新的Array Iterator对象，该对象包含数组中每个索引的键/值对。</p><p>语法：</p><pre class=" language-js"><code class="language-js">arr<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> iterator1<span class="token operator">=</span>arr<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> iterator2 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> iterator3 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用for...of输出一下iterator的值</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> e <span class="token keyword">of</span> iterator3<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// [0, "a"] </span><span class="token comment" spellcheck="true">// [1, "b"] </span><span class="token comment" spellcheck="true">// [2, "c"]</span></code></pre><h2 id="改变原始数组的方法"><a href="#改变原始数组的方法" class="headerlink" title="改变原始数组的方法"></a>改变原始数组的方法</h2>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
            <tag> front end </tag>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文章图片显示问题</title>
      <link href="posts/2c5e.html"/>
      <url>posts/2c5e.html</url>
      
        <content type="html"><![CDATA[<p>​    当我们在Typora写完带有图片的文章并上传后，会发现在hexo中图片无法显示，因为hexo无法引用本地图片。这篇文章介绍使用Gitee+PicGo+Typora来解决这个问题。</p><p>​    一. 创建Gitee仓库</p><p>​            现场注册一个gitee账号，然后创建一个仓库</p><p><img src="https://gitee.com/evan1002/blog-pictures/raw/master/20201016203333.png"></p><p><img src="https://gitee.com/evan1002/blog-pictures/raw/master/20201016203719.png" alt="gitee2"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>React学习笔记</title>
      <link href="posts/3b92.html"/>
      <url>posts/3b92.html</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="React"><a href="#React" class="headerlink" title="React"></a>React</h1><h2 id="为什么使用react？"><a href="#为什么使用react？" class="headerlink" title="为什么使用react？"></a>为什么使用react？</h2><ol><li><p>简单易学</p></li><li><p>开发迅速</p></li><li><p>大公司背书</p></li><li><p>社区强大</p></li><li><p>工作要求</p></li></ol><h2 id="什么是React？"><a href="#什么是React？" class="headerlink" title="什么是React？"></a>什么是React？</h2><p>React用于构建用户界面的JavaScript库。</p><p>React是专注于视图的构建，不是一个请求库，也不是一个打包工具，主要提供UI层面的解决方案。它并不是一个框架，并不能解决项目中的所有问题。</p><h2 id="React三大特性："><a href="#React三大特性：" class="headerlink" title="React三大特性："></a>React三大特性：</h2><ol><li><h4 id="声明式编程"><a href="#声明式编程" class="headerlink" title="声明式编程"></a>声明式编程</h4><p>​    命令式编程：用代码告诉计算机去做什么。</p><p>​    声明式编程：通过代码告诉计算机。你想要的是什么，让计算机想出如何去做。</p></li><li><h4 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h4><p>​    React提供了一种全新的语法扩展JSX，讲渲染逻辑和ui逻辑结合在一起，这个结合体就被称为组  J 件。</p></li><li><h4 id="一次学习，随处编写"><a href="#一次学习，随处编写" class="headerlink" title="一次学习，随处编写"></a>一次学习，随处编写</h4><p>​    学会react后可以在很多地方使用react语法来写代码，比如使用react来编写web端的页面； react+react native来写手机客户端APP；react+react 360开发VR界面。</p></li></ol><h2 id="Create-React-App（CRA"><a href="#Create-React-App（CRA" class="headerlink" title="Create-React-App（CRA)"></a>Create-React-App（CRA)</h2><p>​        —-官方提供的脚手架工具。</p><h3 id="创建一个create-react-app"><a href="#创建一个create-react-app" class="headerlink" title="创建一个create-react-app"></a>创建一个create-react-app</h3><h4 id="（前提："><a href="#（前提：" class="headerlink" title="（前提："></a>（前提：</h4><p>​                1. 安装并会使用node，包括包管理工具npm或者yarn。</p><p>​                 2. 了解ES6语法。）</p><h4 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h4><ol><li><h5 id="npx-create-react-app-项目名"><a href="#npx-create-react-app-项目名" class="headerlink" title="npx create-react-app 项目名"></a>npx create-react-app 项目名</h5><p>( 或者npm install –g create-react-app</p><p>   create-react-app 项目名 )</p></li></ol><ol start="2"><li><h5 id="用vscode打开项目"><a href="#用vscode打开项目" class="headerlink" title="用vscode打开项目"></a>用vscode打开项目</h5><p>Package.jason中</p><pre class=" language-js"><code class="language-js"><span class="token string">"scripts"</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token string">"start"</span><span class="token punctuation">:</span> <span class="token string">"react-scripts start"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//启动项目</span>    <span class="token string">"build"</span><span class="token punctuation">:</span> <span class="token string">"react-scripts build"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//打包构建项目</span>    <span class="token string">"test"</span><span class="token punctuation">:</span> <span class="token string">"react-scripts test"</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">//运行测试</span>    <span class="token string">"eject"</span><span class="token punctuation">:</span> <span class="token string">"react-scripts eject"</span>  <span class="token comment" spellcheck="true">//暴露webpack配置</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>React script是CRA提供的命令工具.</p></li></ol><ol start="3"><li><h5 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h5><p>在index.js中先import：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span></code></pre><p>react并不负责渲染，所以在浏览器端需要引入React Dom来做渲染。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> ReactDom <span class="token keyword">from</span> <span class="token string">'react-dom'</span></code></pre></li></ol><pre><code>  再调用React Dom上的render方法。render的方法接受两个参数，第一个参数可以传入react组件或者react元素。第二个参数传入一个DOM元素作为渲染器的根节点。（一般会在html页面里面写一个id为root的div元素作为根节点，一般只有一个root节点）  ```js</code></pre><p>   ReactDom.render(element, document.getElementById(“root”));<br>      ```</p><pre><code>  在index.js中写的html不是html，是JSX，react定义的一种语法，实际上是个对象。  ```js  例： const element = &lt;h1&gt;hello world!&lt;/h1&gt;;  ```</code></pre><ol start="4"><li><h5 id="启动项目："><a href="#启动项目：" class="headerlink" title="启动项目："></a>启动项目：</h5><p>npm start</p></li></ol><ol start="5"><li><h5 id="配置VSCode-debugger功能："><a href="#配置VSCode-debugger功能：" class="headerlink" title="配置VSCode debugger功能："></a>配置VSCode debugger功能：</h5><p>在项目根目录中创建.vscode\launch.json文件，输入如下代码：</p><pre class=" language-js"><code class="language-js"><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token string">"version"</span><span class="token punctuation">:</span> <span class="token string">"0.2.0"</span><span class="token punctuation">,</span>    <span class="token string">"configurations"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Chrome"</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//配置名称</span>        <span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token string">"chrome"</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//启动的浏览器</span>        <span class="token string">"request"</span><span class="token punctuation">:</span> <span class="token string">"launch"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//启动方式</span>        <span class="token string">"url"</span><span class="token punctuation">:</span> <span class="token string">"http://localhost:3000"</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//启动浏览器后自动访问的地址</span>        <span class="token string">"webRoot"</span><span class="token punctuation">:</span> <span class="token string">"$&amp;#123;workspaceRoot&amp;#125;/src"</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">//源代码所在目录</span>        <span class="token string">"sourceMapPathOverrides"</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token string">"webpack:///src/*"</span><span class="token punctuation">:</span> <span class="token string">"$&amp;#123;webRoot&amp;#125;/*"</span>   <span class="token operator">/</span><span class="token operator">/</span>sourcemap所在目录        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token punctuation">]</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>（配置代码可以在create-react-app中的development下的editor setup中找到）</p></li></ol><ol start="6"><li><h5 id="测试："><a href="#测试：" class="headerlink" title="测试："></a>测试：</h5><p>配置好之后在index.js的第六行打个断点，然后进入Vscode的debug窗口，点击运行，如果代码在运行到第六行就卡住了，并且在编译器的左边出现了变量和调用栈，则说明配置成功了。</p></li></ol><p><img src="https://gitee.com/evan1002/blog-pictures/raw/master/20201016201257.png" alt="变量和调用栈"></p><p>至此，本地开发环境就基本搭建好了。</p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>前端书籍</title>
      <link href="posts/3ec8.html"/>
      <url>posts/3ec8.html</url>
      
        <content type="html"><![CDATA[<p>语法类：</p><ol><li>JavaScript高级程序设计（红宝书，经典）</li><li>JavaScript DOM  （简单入门）</li><li>现代JavaScript教程（在线版学习资料）</li></ol><p>工程类：</p><ol><li>JavaScript忍者秘籍（jQuery作者创作）</li><li>JavaScript框架设计 （难度较大）</li></ol><p>设计模式：</p><ol><li>JavaScript设计模式与开发实践（蓝皮书）</li></ol><p>算法类：</p><ol><li>学习JavaScript数据结构与算法（入门）</li><li>算法（经典）</li></ol><p>语法细节：</p><ol><li>你不知道的JavaScript 上、中（小黄书）</li><li>JavaScript语言精髓与实践（绿皮书）</li></ol><p>查缺补漏：</p><ol><li>DOM启蒙</li><li>JavaScript函数式编程指南</li></ol><p>其他：</p><ol><li>JavaScript语言精髓（蝴蝶书）</li><li>JavaScript权威指南（犀牛书）</li><li>（其他动物书）</li></ol>]]></content>
      
      
      <categories>
          
          <category> 资料 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> front end </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端学习路线</title>
      <link href="posts/2b2d.html"/>
      <url>posts/2b2d.html</url>
      
        <content type="html"><![CDATA[<p>B站主播objtube的卢克儿推荐的前端学习路线。</p><p><a href="https://objtube.gitee.io/front-end-roadmap/#/">https://objtube.gitee.io/front-end-roadmap/#/</a></p><p><img src="https://gitee.com/evan1002/blog-pictures/raw/master/20201016213444.jpeg" alt="roadmap-完整路线"></p>]]></content>
      
      
      <categories>
          
          <category> 资料 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> front end </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
